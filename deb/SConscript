import hashlib, os, shutil, sys

Import('env') # exported by parent SConstruct

# Here's the core info for the DEBIAN/control file of the package
DEBNAME = "hpg-variant"
DEBVERSION = "0.2"
DEBMAINT = "Cristina Yenyxe Gonzalez Garcia (cgonzalez@cipf.es)"
DEBARCH = "amd64"
DEBDEPENDS = "libconfig8, libcurl4-openssl-dev, libgsl0ldbl, libxml2, zlib1g" # what are we dependent on?
DEBDESC = "HPG Variant"
DEBSECTION = "user/science"

DEBFILES = [

    # Now we specify the files to be included in the .deb
    # Where they should go, and where they should be copied from.
    # If you have a lot of files, you may wish to generate this 
    # list in some other way.
    ("usr/bin/hpg-var-effect",                  "#bin/hpg-var-effect"),
    ("usr/bin/hpg-var-gwas",                    "#bin/hpg-var-gwas"),
    ("usr/bin/hpg-var-vcf",                     "#bin/hpg-var-vcf"),
    
    ("etc/hpg-variant/hpg-variant.conf",        "#bin/hpg-variant.cfg"),
    ("etc/hpg-variant/vcf-info-fields.conf",    "#bin/vcf-info-fields.cfg"),
    
]

# This is the debian package we're going to create
#debpkg = '#%s_%s-%s_%s.deb' % (DEBNAME, DEBVERSION, svn_version, DEBARCH)
debpkg = '#%s_%s-%s.deb' % (DEBNAME, DEBVERSION, DEBARCH)

# and we want it to be built when we build 'debian'
env.Alias("debian", debpkg)

DEBCONTROLFILE = os.path.join(DEBNAME, "DEBIAN/control")
DEBMD5FILE = os.path.join(DEBNAME, "DEBIAN/md5sums")

# This copies the necessary files into place into place.
# Fortunately, SCons creates the necessary directories for us.
for f in DEBFILES:
    # We put things in a directory named after the package
    dest = os.path.join(DEBNAME, f[0])
    # The .deb package will depend on this file
    env.Depends(debpkg, dest)
    # Copy from the the source tree.
    env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
    # The control and MD5 files also depend on each source because we'd like
    # to know the total installed size of the package
    env.Depends(DEBCONTROLFILE, dest)
    env.Depends(DEBMD5FILE, dest)

# Now to create the control file:
CONTROL_TEMPLATE = """
Package: %s
Priority: extra
Section: %s
Installed-Size: %s
Maintainer: %s
Architecture: %s
Version: %s
Depends: %s
Description: %s
"""

env.Depends(debpkg, DEBCONTROLFILE)
env.Depends(debpkg, DEBMD5FILE)

# This function creates the control file from the template and info specified 
# above, and works out the final size of the package.
def make_control(target=None, source=None, env=None):
    installed_size = 0
    for i in DEBFILES:
        installed_size += os.stat(str(env.File(i[1])))[6]
    control_info = CONTROL_TEMPLATE % (
        DEBNAME, DEBSECTION, installed_size, DEBMAINT, DEBARCH, DEBVERSION,
        DEBDEPENDS, DEBDESC)
    f = open(str(target[0]), 'w')
    f.write(control_info)
    f.close()

# The following 2 functions create the md5sums file.
def md5sum(filename):
    md5 = hashlib.md5()
    with open(filename, 'rb') as f: 
        for chunk in iter(lambda: f.read(128*md5.block_size), b''): 
            md5.update(chunk)
    return md5.hexdigest()

def make_md5sums(target=None, source=None, env=None):
    md5sums = ''
    installed_size = 0
    for i in DEBFILES:
        src_filename = str(env.File(i[0]))
        dest_filename = str(env.File(i[1]))
        md5sums += "%s  ./%s\n" % (md5sum(dest_filename), src_filename)
    f = open(str(target[0]), 'w')
    f.write(md5sums)
    f.close()

    
# We can generate the files in the DEBIAN folder by calling make_control and make_md5sums
env.Command(DEBCONTROLFILE, None, make_control)
env.Command(DEBMD5FILE, None, make_md5sums)

# And we can generate the .deb file by calling dpkg-deb
env.Command(debpkg, [DEBCONTROLFILE, DEBMD5FILE],
            "fakeroot dpkg-deb -b %s %s" % ("deb/%s" % DEBNAME, "$TARGET"))
